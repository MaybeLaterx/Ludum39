<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>humanTurn = false;
maxTurns = 40;

maxMoves = 2; 
movesLeft = maxMoves; 

maxHumanPowers = 2; 
maxShadowPowers = 3; 
powersLeft = 5; 

turnsElapsed = 1;

// AI initialisations
maxTimer = 45; 
timer = maxTimer;
canKill = true; 
canSpawn = true;
canUpgrade = true; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End turn
if ((movesLeft &lt; 1 || !humanTurn) &amp;&amp; powersLeft &lt; 1) { 
    humanTurn = !humanTurn;
    turnsElapsed++; 
    movesLeft = maxMoves; 
    if (humanTurn) powersLeft = maxHumanPowers; 
    else powersLeft = maxShadowPowers;
    
    if (!humanTurn) {
        canKill = true; // AI initialisations
        canSpawn = true;
        canUpgrade = true;
        timer = maxTimer;
        
        with (oHuman) selected = false;
    
        with (oShadow2) {
            instance_create(x,y,oShadow3);
            instance_destroy();
            spread(x,y);
        }
        
        for (i = 0; i &lt; instance_number(oShadow1); i++) {
            inst = instance_find(oShadow1,i);
            with (inst) {   
                if (canGrow(x,y)) { 
                    instance_create(x,y,oShadow2);
                    instance_destroy();
                    other.i--;
                }
            }
        }
        
        with (oShadow0) { 
            instance_create(x,y,oShadow1); 
            instance_destroy();
        }
        
        with (oShadow1) {
            depth = -5; 
            canAttack = true;
        }
        with (oHuman) {
            depth = -4; 
            sprite_index = sHumanIdleR;
        }
        
        if (turnsElapsed &gt;= maxTurns) room_goto(rHumans);
    } else { 
        with (oShadow1) depth = -4; 
        with (oHuman) depth = -5; 
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shadows AI
if (global.mode == 0 &amp;&amp; !humanTurn &amp;&amp; instance_exists(oHuman)) {
    timer--; 
    
    if (timer &lt; 1) { 
        trace("AI commencing");
        
        if (canKill) {
            canKill = attemptKill(); 
            if (canKill) timer = maxTimer;
        } else if (canSpawn) {
            canSpawn = attemptSpawn(); 
            if (canSpawn) timer = maxTimer;    
        } else if (canUpgrade) { 
            canUpgrade = attemptUpgrade(); 
            if (canUpgrade) timer = maxTimer; 
        } else oController.powersLeft = 0; 

    }
}    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_set_color(c_white);
draw_set_font(fntCubic);
draw_set_valign(fa_middle);
draw_set_halign(fa_left);

if (humanTurn) turnText = "Humans' Turn"; 
else turnText = "Shadows' Turn";
draw_text(x,y,turnText + " (Turns elapsed: " + string(turnsElapsed) + ")");
draw_text(x,y + 35,"Powers remaining: " + string(powersLeft)); 
if (humanTurn) draw_text(x,y + 70,"Moves remaining: " + string(movesLeft)); 



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
