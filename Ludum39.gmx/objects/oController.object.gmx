<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>humanTurn = false;
maxTurns = 40;

maxMoves = 2; 
movesLeft = maxMoves; 

maxHumanPowers = 2; 
maxShadowPowers = 3; 
powersLeft = 5; 

turnsElapsed = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End turn
if ((movesLeft &lt; 1 || !humanTurn) &amp;&amp; powersLeft &lt; 1) { 
    humanTurn = !humanTurn;
    turnsElapsed++; 
    movesLeft = maxMoves; 
    if (humanTurn) powersLeft = maxHumanPowers; 
    else powersLeft = maxShadowPowers;
    
    if (!humanTurn) {
        with (oHuman) selected = false;
    
        with (oShadow2) {
            instance_create(x,y,oShadow3);
            instance_destroy();
            spread(x,y);
        }
        
        for (i = 0; i &lt; instance_number(oShadow1); i++) {
            inst = instance_find(oShadow1,i);
            with (inst) {   
                if (canGrow(x,y)) { 
                    instance_create(x,y,oShadow2);
                    instance_destroy();
                    other.i--;
                }
            }
        }
        
        with (oShadow0) { 
            instance_create(x,y,oShadow1); 
            instance_destroy();
        }
        
        with (oShadow1) {
            depth = -5; 
            canAttack = true;
        }
        with (oHuman) {
            depth = -4; 
            sprite_index = sHumanIdleR;
        }
        
        if (turnsElapsed &gt;= maxTurns) room_goto(rHumans);
    } else { 
        with (oShadow1) depth = -4; 
        with (oHuman) depth = -5; 
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.mode = 0 &amp;&amp; !humanTurn) { // AI
    kill = false; 
    
    // ATTEMPT TO KILL
    with (oShadow1) {  
        rnd = random(1); // fail chance
        if (rnd &lt; 0.95 &amp;&amp; oController.powersLeft &gt; 0 &amp;&amp; canAttack) {
            size = 32;
            insts[0] = instance_position(x + size,y,all); 
            insts[1] = instance_position(x,y - size,all); 
            insts[2] = instance_position(x - size,y,all); 
            insts[3] = instance_position(x,y + size,all);
            
            for (h = 0; h &lt; 4; h++) { // directions
                tile = insts[h];
                attack = false; 
                if (tile != noone) { 
                    type = tile.object_index; 
                    if (type != oWall &amp;&amp; type != oShadow3) { 
                        for (i = 0; i &lt; 3; i++) { // height
                            for (j = 0; j &lt; 3; j++) { // width
                                xx = tile.x - 32 + (32*j);
                                yy = tile.y - 32 + (32*i);
                                deadHuman = instance_position(xx,yy,oHuman); 
                                if (deadHuman != noone) { 
                                    attack = true; 
                                    //i = 99; 
                                    //j = 99;
                                    h = 99; // Exit loop
                                    with (deadHuman) { 
                                        instance_create(x,y,oFloor); 
                                        death = instance_create(x,y,oDeath);
                                        death.sprite_index = sHumanDeath;
                                        instance_destroy();
                                    }
                                }
                            }
                        }    
                    }
                }
                
                if (attack) { 
                    oController.powersLeft--; 
                    other.kill = true;
                    instance_create(x,y,oFloor); 
                    death = instance_create(x,y,oDeath);
                    death.sprite_index = sShadow1Death;
                    instance_destroy();
                }
            }
        }
    }
    
    if (kill) audio_play_sound(sndHumanDeath,0,false); 
    
    if (!instance_exists(oHuman)) room_goto(rShadows);
    else { 
        // ATTEMPT TO SPAWN
        corners = ds_list_create(); 
        singles = ds_list_create();
        with (oHuman) { 
            for (i = 0; i &lt; 7; i++) { 
                for (j = 0; j &lt; 7; j++) { 
                    xx = x - 32*4 + (32*j);
                    yy = y - 32*4 + (32*i);
                    flr = instance_position(xx,yy,oFloor); 
                    if (flr != noone) {
                        if (canGrow(flr.x,flr.y)) ds_list_add(other.corners,flr);
                        else if (isSuitable(flr.x,flr.y)) ds_list_add(other.singles,flr);
                    }
                }
            }
        }
        
        trace("Corners");
        for (i = 0; i &lt; ds_list_size(corners); i++) { 
            trace(ds_list_find_value(corners,i));
        }
        
        trace("Singles");
        for (i = 0; i &lt; ds_list_size(singles); i++) { 
            trace(ds_list_find_value(singles,i));
        }
        
        // might hang
        if (oController.powersLeft &gt; 0) audio_play_sound(sndShadow,0,false);
        attempts = 0; 
        while (oController.powersLeft &gt; 0 &amp;&amp; attempts &lt; 50) {
            attempts++; 
            rnd = random(1); 
            if (rnd &lt; 0.8) list = corners;
            else list = singles;
            
            if (!ds_list_empty(list)) {  
                rnd2 = irandom(ds_list_size(list) - 1);
                trace(rnd2);
                tile = ds_list_find_value(list,rnd2);
                if (instance_exists(tile)) { 
                    instance_create(tile.x,tile.y,oShadow1);
                    with (tile) instance_destroy();
                    oController.powersLeft--;
                }
            }
        }
        
        oController.powersLeft = 0;             
            
        ds_list_destroy(corners);
        ds_list_destroy(singles); 
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_set_color(c_white);
draw_set_font(fntCubic);
draw_set_valign(fa_middle);
draw_set_halign(fa_left);

if (humanTurn) turnText = "Humans' Turn"; 
else turnText = "Shadows' Turn";
draw_text(x,y,turnText + " (Turns elapsed: " + string(turnsElapsed) + ")");
draw_text(x,y + 35,"Powers remaining: " + string(powersLeft)); 
if (humanTurn) draw_text(x,y + 70,"Moves remaining: " + string(movesLeft)); 



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
