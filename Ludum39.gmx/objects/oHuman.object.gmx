<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sHumanIdleR</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.25; 
quadrant = 0;
size = 32; 

maxCharge = 3; 
charge = maxCharge;

selected = false; 
adjacent = false; 
shining = false;

lights[0] = sLight0; 
lights[1] = sLight1; 
lights[2] = sLight2; 
lights[3] = sLight3; 
lights[4] = sLight4; 

threats = 0; 
scopes = 0; 
battery = 99; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Select/deselect
inside = isInside(x,y);
adjacent = isAdjacent(x,y); 

if (mouse_check_button_pressed(mb_left) &amp;&amp; instance_position(mouse_x,mouse_y,oEndTurn)) { 
    selected = false; 
}

if (mouse_check_button_pressed(mb_left) &amp;&amp; inside &amp;&amp; oController.humanTurn &amp;&amp; oController.turnsElapsed != 1 &amp;&amp; (global.ai != "humans" &amp;&amp; global.ai != "simulation")) { 
    selected = !selected; 
    if (selected) trace("Human selected");
    else trace("Human deselected");
    
    if (selected) { 
        with (oHuman) if (id != other.id) selected = false;  
    }
}

if (mouse_check_button_pressed(mb_right)) {
    if (selected) { 
        trace("Human deselected"); 
        selected = false;
    } 
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shine light
if (selected 
&amp;&amp; mouse_check_button_pressed(mb_left)
&amp;&amp; oController.powersLeft &gt; 0 
&amp;&amp; charge &gt; 0 
&amp;&amp; instance_exists(hShadow) 
&amp;&amp; (hShadow.x = x || hShadow.y == y)) 
    shootBeam(id,dir); 

/*
if (selected 
&amp;&amp; mouse_check_button_pressed(mb_left) 
&amp;&amp; quadrant != 0 
&amp;&amp; !inside 
&amp;&amp; oController.powersLeft &gt; 0 
&amp;&amp; !adjacent 
&amp;&amp; charge &gt; 0) 
    shootBeam(id,dir); 
*/

if (shining) {
    if (timer &lt;= 0) shining = false; 
    else timer--; 
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move
if (selected &amp;&amp; mouse_check_button_pressed(mb_left) &amp;&amp; !inside &amp;&amp; adjacent &amp;&amp; oController.movesLeft &gt; 0) {
    flr = instance_position(mouse_x,mouse_y,oFloor);
    if (flr != noone) moveHuman(id,flr);  
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//charge = 2;
max_charges = 3;
var i;

for(i = 0; i &lt; max_charges; ++i){
    if(i &lt; charge)
        to_draw = sEnergy1;
    else
        to_draw = sEnergy0;
    
    x_spacing = 0;
    
    switch(i) {
        case 0: x_spacing = -sprite_width / 2 + 4; break;
        case 1: x_spacing = 0; break;
        case 2: x_spacing = sprite_width / 2 - 4; break;
    }
        
    draw_sprite(to_draw, 0, x + x_spacing, y - 12 - (sprite_height / 2));
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sFloor,0,x,y);
if (selected) {
    draw_sprite(sOutline,0,x,y);
    //draw_text(700,100,"Charge remaining: " + string(charge));
}
draw_self(); 

// Hover light options
hShadow = instance_position(mouse_x,mouse_y,oShadows); 
if (selected &amp;&amp; oController.powersLeft &gt; 0 &amp;&amp; charge &gt; 0 &amp;&amp; instance_exists(hShadow) &amp;&amp; (hShadow.x = x || hShadow.y == y)) { 
    pd = point_direction(x,y,mouse_x,mouse_y);
    if (pd &gt; 315 || pd &lt; 45) quadrant = 1; 
    else if (pd &gt; 45 &amp;&amp; pd &lt; 135) quadrant = 2; 
    else if (pd &gt; 135 &amp;&amp; pd &lt; 225) quadrant = 3;   
    else if (pd &gt; 225 &amp;&amp; pd &lt; 315) quadrant = 4;
    else quadrant = 0; 
    
    switch (quadrant) { 
        default : 
        case 1 : 
            xd = 1; 
            yd = 0;
            dir = 0;
            sprite_index = sHumanIdleR;
            break; 
        case 2 : 
            xd = 0; 
            yd = -1;
            dir = 90;
            sprite_index = sHumanIdleU; 
            break; 
        case 3 : 
            xd = -1; 
            yd = 0;
            dir = 180; 
            sprite_index = sHumanIdleL;
            break; 
        case 4 : 
            xd = 0; 
            yd = 1;
            dir = 270;  
            sprite_index = sHumanIdleD;
            break;
    } 
    
    for (i = 0; i &lt; 5; i++) {
        lx = x + xd*size*(i+1);
        ly = y + yd*size*(i+1);
        //trace(string(i) + " " + string(lx) + " " + string(ly));
        if (place_meeting(lx,ly,oWall) || place_meeting(lx,ly,oHuman) || place_meeting(lx,ly,oShadow3)) break;

        draw_sprite_ext(lights[i], 0, lx, ly, 1, 1, dir, c_white, 0.25);
    }   
}

// Hover movement options
if (adjacent &amp;&amp; selected &amp;&amp; oController.movesLeft &gt; 0 &amp; !inside) { 
    flr = instance_position(mouse_x,mouse_y,oFloor);
    //trace(flr);
    if (flr != noone) { 
        if (flr.x != x &amp;&amp; flr.y != y) arrow = sArrowD
        else arrow = sArrowN; 
        
        //rot = floor(point_direction(x,y,mouse_x,mouse_y)/90)*90;
        if (flr.x &gt; x &amp;&amp; flr.y &lt;= y) rot = 0; 
        else if (flr.y &lt; y &amp;&amp; flr.x &lt;= x) rot = 90; 
        else if (flr.x &lt; x &amp;&amp; flr.y &gt;= y) rot = 180; 
        else rot = 270;
        draw_sprite_ext(arrow,0,flr.x,flr.y,1,1,rot,-1,1); 
    }
}


if (shining) { 
    for (i = 0; i &lt; 5; i++) {
        lx = x + xd*size*(i+1);
        ly = y + yd*size*(i+1);
        //trace(string(i) + " " + string(lx) + " " + string(ly));
        if (place_meeting(lx,ly,oWall) || place_meeting(lx,ly,oHuman) || place_meeting(lx,ly,oShadow3)) break;
        
        draw_sprite_ext(lights[i], 0, lx, ly, 1, 1, dir, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
