<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sHumanIdleR</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>quadrant = 0;
size = 32; 

selected = false; 

lights[0] = sLight0; 
lights[1] = sLight1; 
lights[2] = sLight2; 
lights[3] = sLight3; 
lights[4] = sLight4; 

shining = false; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inside = isInside(x,y);

// Shine light
if (selected) { 
    if (mouse_check_button_pressed(mb_left) &amp;&amp; quadrant != 0 &amp;&amp; !inside &amp;&amp; oController.powersLeft &gt; 0) { 
        shining = true;
        oController.powersLeft--;
        timer = 35;
        for (i = 0; i &lt; 5; i++) {
            lx = x + xd*size*(i+1);
            ly = y + yd*size*(i+1);
            trace(string(i) + " " + string(lx) + " " + string(ly));
            if (place_meeting(lx,ly,oWall) || place_meeting(lx,ly,oHuman)) break;
            draw_sprite_ext(lights[i], 0, lx, ly, 1, 1, dir, c_white, 1);
        }
    }
}

if (shining) {
    if (timer &lt;= 0) shining = false; 
    else timer--; 
}


// Select/deselect
if (mouse_check_button_pressed(mb_left) &amp;&amp; inside &amp;&amp; oController.humanTurn) { 
    selected = !selected; 
    if (selected) trace("Player selected");
    else trace("Player deselected");
    
    if (selected) { 
        with (oHuman) if (id != other.id) selected = false;  
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sFloor,0,x,y);
if (selected) draw_sprite_ext(sHumanIdle,0,x,y,1.2,1.2,0,c_red,1)
draw_self(); 

// Hover light options
if (selected &amp;&amp; oController.powersLeft &gt; 0) { 
pd = point_direction(x,y,mouse_x,mouse_y);
    if (pd &gt; 315 || pd &lt; 45) quadrant = 1; 
    else if (pd &gt; 45 &amp;&amp; pd &lt; 135) quadrant = 2; 
    else if (pd &gt; 135 &amp;&amp; pd &lt; 225) quadrant = 3;   
    else if (pd &gt; 225 &amp;&amp; pd &lt; 315) quadrant = 4;
    else quadrant = 0; 
    
    switch (quadrant) { 
        default : 
        case 1 : 
            xd = 1; 
            yd = 0;
            dir = 0;
            break; 
        case 2 : 
            xd = 0; 
            yd = -1;
            dir = 90; 
            break; 
        case 3 : 
            xd = -1; 
            yd = 0;
            dir = 180; 
            break; 
        case 4 : 
            xd = 0; 
            yd = 1;
            dir = 270;  
            break;
    } 
    
    for (i = 0; i &lt; 5; i++) {
        lx = x + xd*size*(i+1);
        ly = y + yd*size*(i+1);
        trace(string(i) + " " + string(lx) + " " + string(ly));
        if (place_meeting(lx,ly,oWall) || place_meeting(lx,ly,oHuman)) break;
        draw_sprite_ext(lights[i], 0, lx, ly, 1, 1, dir, c_white, 0.25);
    }

    //switch (quadrant) { 
    
    //}    
}

if (shining) { 
    for (i = 0; i &lt; 5; i++) {
        lx = x + xd*size*(i+1);
        ly = y + yd*size*(i+1);
        trace(string(i) + " " + string(lx) + " " + string(ly));
        if (place_meeting(lx,ly,oWall) || place_meeting(lx,ly,oHuman)) break;
        draw_sprite_ext(lights[i], 0, lx, ly, 1, 1, dir, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
