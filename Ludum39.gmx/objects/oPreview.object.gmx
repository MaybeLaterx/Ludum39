<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sFloor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>size = sprite_get_width(sFloor); 
scale = 1; 
currentLevel = -1; 
grid = ds_grid_create(0,0); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_grid_destroy(grid); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Grid initialisation
if (currentLevel != global.currentLevel) { 
    currentLevel = global.currentLevel; 
    
    if (global.ai == "humans") swapSelect = oLevelChange.maxLevels - currentLevel;
    else swapSelect = currentLevel; 
    
    switch (swapSelect) { 
        case 0 : layout = "XXXXXXXXXXXXXXXXXXXXXX#XXXXXXXXX000XXXXXXXXXX#XXXXXXXX0000000XXXXXXX#XXXXXXX0000000000XXXXX#XXXXXX00000000000XXXXX#XXX0000000000H0000XXXX#XX00000H00B0000000000X#X0000000000000000000XX#XXXX000000000000000XXX#XXXXX0000000000000XXXX#XXXXXXX000000XXXXXXXXX#XXXXXXXXX000XXXXXXXXXX#XXXXXXXXXXX0XXXXXXXXXX#XXXXXXXXXXXXXXXXXXXXXX";
                break;
        case 1 : layout = "XXXXXXXXXXXXXXXXXXX#XXXXXXXX000X00XXXXX#XXXXXX000000000XXXX#XXXX000000H00000XXX#XXXX00000000B0000XX#XXXX0000000000000XX#XXX000000XX000000XX#X000000000XXX0000XX#XX0000H000XX000000X#XX0000000000000000X#XX00000B0000000000X#X0000000000H00000XX#XXX00000000000000XX#XXXXX00000000000XXX#XXXXXXXXX000X0XXXXX#XXXXXXXXXXXXXXXXXXX";
                break; 
        case 2 : layout = "XXXXXXXXXXXXXXXXXX#XXXXXXX000X00XXXXX#XXXX00000H00000XXX#XXXX0000000B0000XX#XXXX000000000000XX#XXX0000XXX000000XX#X00000000XXX0000XX#XX000H000XX000000X#XX0000B0000000000X#X000000000H00000XX#XXXXX0000000000XXX#XXXXXXXX000X0XXXXX#XXXXXXXXXXXXXXXXXX";
                break;
        case 3 : layout = "XXXXXXXXXXXXXXXXXX#XXX00XXXXXXXX0XXXX#XX0000XXXXX00000XX#X00000XXXXXX00000X#X000000XXXXX00000X#XX00B00XXXX00HB0XX#X0000000X0X00000XX#X000H000X00000000X#X000000000000000XX#X00000000000000XXX#X00000H000H0000XXX#XX0000000000000XXX#XXX0X000000000XXXX#XXXXXX000000XXXXXX#XXXXXXXXXXXXXXXXXX";
                break; 
        case 4 : layout = "XXXXXXXXXXXXXXXXX#XXXXXX0XXXXXXXXXX#XXX0XX0XX0XXX00XX#XXX0000X00XX000XX#XX00000000X00000X#XX0000000000000XX#XXXB000HHH0000XXX#X0000000000BXXXXX#XX00X00000000XXXX#X000X0X0X000000XX#XX00XXX0X0X00000X#XXXXXXXXXXXXX0XXX#XXXXXXXXXXXXXXXXX";
                break; 
        case 5 : layout = "XXXXXXXXXXXXXXXXXXXXX#XXXXXXXXXXXOOXXOXXXXX#XXXXXXXXXXOOOOOOOXXXX#XXXOXXXXOOOOOOOOOOXXX#XOOOOXXOOOOOBOOOOOXXX#XXOOOOXOOOOOOOOOOOXXX#XOOOOOXXOOOOOOOOXXXXX#XXOOOOOXXXOOXXXXXOXXX#XXXOOOOOOXXXXXOOOOXXX#XXXOOOOOOOOOXOOOOOXXX#XXXXOOOBOOOOXOOOOOOXX#XXXXXOOOOOOXXOOOBOOOX#XXXXXOOOOOOXOOOOOOOOX#XXXXXXXOOOXXXOOOOOOXX#XXXXXXXXXXXXXXOOOOXXX#XXXXXXXXXXXXXXXXXXXXX";
                break; 
        default : layout = "XXX#X0X#XXX"; 
                break;
    } 
       
    width = getLayoutWidth(layout);
    height = getLayoutHeight(layout); 

    xOffset = x - width*size/2;
    yOffset = y - height*size/2;
    
    ds_grid_destroy(grid); 
    grid = ds_grid_create(width,height);
    
    for (i = 0; i &lt; height; i++) { 
        for (j = 0; j &lt; width; j++) { 
            pos = 1 + i*(width+1) + j;
            //trace(pos);
            thisChar = string_char_at(layout,pos);//1 + height*width + width);
            if (thisChar != "#") { 
                //trace(thisChar);
                //if (thisChar == "O") glyph = "O"; 
                //else glyph = "X";
                ds_grid_set(grid,j,i,thisChar);
            }
        }
    }
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>size = sprite_get_width(sFloor); 

xOffset = x - width*size*scale/2;
yOffset = y - height*size*scale/2;

for (i = 0; i &lt; height; i++) { 
    //trace(i);
    //trace("Height:" + string(height)); 
    for (j = 0; j &lt; width; j++) { 
        tile = ds_grid_get(grid,j,i);
        xx = xOffset + j*size*scale; 
        yy = yOffset + i*size*scale;
        
        //trace(tile); 
        draw_sprite_ext(sFloor,0,xx,yy,scale,scale,0,-1,1); 
        switch (tile) { 
            case "H" : draw_sprite_ext(sHumanIdleR,0,xx,yy,scale,scale,0,-1,1); break;
            case "B" : draw_sprite_ext(sBattery,0,xx,yy,scale,scale,0,-1,1); break;
            //case "0" : draw_sprite(sFloor,0,xx,yy); break;
            case "1" : draw_sprite_ext(sShadow1,0,xx,yy,scale,scale,0,-1,1); break;
            case "2" : draw_sprite_ext(sShadow2,0,xx,yy,scale,scale,0,-1,1); break;
            case "3" : draw_sprite_ext(sShadow3,0,xx,yy,scale,scale,0,-1,1); break;
            case "X" : draw_sprite_ext(sWall,0,xx,yy,scale,scale,0,-1,1); break;
            default : break;
        } 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
